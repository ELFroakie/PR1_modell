import random

class Car:
    def __init__(self, position, max_speed, acceleration, brake_probability, name, field_size):
        self.position = position
        self.field_size = field_size
        self.speed = 0
        self.max_speed = max_speed
        self.acceleration = acceleration
        self.brake_probability = brake_probability
        self.name = name
        self.laps = 0
        self.total_distance = 0

    def get_coordinates(self):
        x = self.position % self.field_size
        y = self.position // self.field_size
        return x, y

    def set_position(self, new_position):
        self.position = new_position

    def decide_action(self, distance_to_next):
        total_cells = self.field_size * self.field_size
        max_possible_speed = min(self.speed + self.acceleration, self.max_speed)
        if random.random() < self.brake_probability:
            return 'brake'
        if distance_to_next <= self.speed:
            return 'brake'
        if self.speed < self.max_speed:
            return 'accelerate'
        return 'maintain'

    def update_speed(self, action):
        if action == 'accelerate':
            self.speed = min(self.speed + self.acceleration, self.max_speed)
        elif action == 'brake':
            self.speed = max(self.speed - self.acceleration, 0)

    def move(self):
        total_cells = self.field_size * self.field_size
        
        new_position = self.position + self.speed
        self.total_distance += self.speed
        
        if new_position >= total_cells:
            self.laps += 1
            self.position = new_position - total_cells
            x, y = self.get_coordinates()
            print(f"üéâ {self.name} –∑–∞–≤–µ—Ä—à–∏–ª –∫—Ä—É–≥ (–≤—Å–µ–≥–æ {self.laps})! –ù–∞—á–∏–Ω–∞–µ—Ç —Å –ø–æ–∑–∏—Ü–∏–∏ ({x},{y}).")
        else:
            self.position = new_position

    def get_distance_to_next_car(self, cars):
        min_distance = float('inf')
        current_pos = self.position
        total_cells = self.field_size * self.field_size
        
        for car in cars:
            if car is not self:
                if car.position > current_pos:
                    distance = car.position - current_pos - 1
                    if distance < min_distance:
                        min_distance = distance
                else:
                    distance = (car.position + total_cells) - current_pos - 1
                    if distance < min_distance:
                        min_distance = distance
        
        return min_distance if min_distance != float('inf') else total_cells - current_pos - 1

    def __str__(self):
        x, y = self.get_coordinates()
        return f"{self.name}: –ø–æ–∑ ({x},{y}), —Å–∫–æ—Ä {self.speed}, –∫—Ä—É–≥–∏ {self.laps}, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è {self.total_distance}"

def generate_car_name(index):
    names = ["–ú–æ–ª–Ω–∏—è", "–ì—Ä–æ–º", "–ü—É–ª—è", "–†–∞–∫–µ—Ç–∞", "–í—Å–ø—ã—à–∫–∞", "–°–ø–∏–¥–∏", "–ë–ª–µ–π–∑", "–í–∏—Ö—Ä—å", "–¶–∏–∫–ª–æ–Ω", "–£—Ä–∞–≥–∞–Ω", "–¢–æ—Ä–Ω–∞–¥–æ", "–®—Ç–æ—Ä–º", "–°–æ–∫–æ–ª", "–û—Ä–µ–ª", "–Ø—Å—Ç—Ä–µ–±", "–§–µ–Ω–∏–∫—Å", "–î—Ä–∞–∫–æ–Ω", "–¢–∏–≥—Ä", "–ü–∞–Ω—Ç–µ—Ä–∞", "–í–æ–ª–∫", "–ê–∫—É–ª–∞", "–ö–æ–±—Ä–∞", "–ì–∞–¥—é–∫–∞", "–°–∫–æ—Ä–ø–∏–æ–Ω"]
    numbers = ["01", "02", "07", "11", "17", "22", "27", "33", "44", "55", "66", "77", "88", "99"]
    return f"{random.choice(names)}-{random.choice(numbers)}"

def generate_random_car_parameters():
    max_speed = random.randint(2, 6)
    acceleration = random.randint(1, 3)
    brake_probability = round(random.uniform(0.1, 0.4), 2)
    return max_speed, acceleration, brake_probability

def initialize_cars_automatically(field_size):
    cars = []
    car_count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: "))
    total_cells = field_size * field_size
    available_positions = list(range(total_cells))
    random.shuffle(available_positions)
    print(f"\n–°–æ–∑–¥–∞—é {car_count} –º–∞—à–∏–Ω —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
    
    for i in range(car_count):
        if available_positions:
            position = available_positions.pop()
        else:
            position = random.randint(0, total_cells - 1)
        
        x = position % field_size
        y = position // field_size
        max_speed, acceleration, brake_probability = generate_random_car_parameters()
        name = generate_car_name(i + 1)
        car = Car(position, max_speed, acceleration, brake_probability, name, field_size)
        cars.append(car)
        print(f"–ú–∞—à–∏–Ω–∞ {i+1}: {name} - –ü–æ–∑–∏—Ü–∏—è ({x},{y}), –ú–∞–∫—Å–°–∫–æ—Ä {max_speed}, –£—Å–∫–æ—Ä–µ–Ω–∏–µ {acceleration}, –¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ {brake_probability}")
    
    return cars

def initialize_cars_manually(field_size):
    cars = []
    car_count = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—à–∏–Ω: "))
    total_cells = field_size * field_size
    
    for i in range(car_count):
        print(f"\n–ú–∞—à–∏–Ω–∞ {i+1}:")
        while True:
            try:
                x = int(input(f"–ü–æ–∑–∏—Ü–∏—è X (0-{field_size-1}): "))
                y = int(input(f"–ü–æ–∑–∏—Ü–∏—è Y (0-{field_size-1}): "))
                
                if x < 0 or x >= field_size or y < 0 or y >= field_size:
                    print(f"–ü–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-{field_size-1}")
                    continue
                
                position = y * field_size + x
                position_taken = any(car.position == position for car in cars)
                if position_taken:
                    print("–≠—Ç–∞ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–æ–π –º–∞—à–∏–Ω–æ–π!")
                    continue
                    
                break
            except ValueError:
                print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
        
        max_speed = int(input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: "))
        acceleration = int(input("–£—Å–∫–æ—Ä–µ–Ω–∏–µ: "))
        brake_probability = float(input("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è (0-1): "))
        name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã: ")
        
        car = Car(position, max_speed, acceleration, brake_probability, name, field_size)
        cars.append(car)
    
    return cars

def simulate_step(cars, field_size):
    print("\n" + "="*60)
    print("–ù–æ–≤—ã–π —à–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏:")
    
    total_cells = field_size * field_size
    sorted_cars = sorted(cars, key=lambda car: -car.position)
    
    for car in sorted_cars:
        distance_to_next = car.get_distance_to_next_car(cars)
        action = car.decide_action(distance_to_next)
        old_speed = car.speed
        car.update_speed(action)
        speed_change = car.speed - old_speed
        print(f"{car.name}: –¥–∏—Å—Ç–∞–Ω—Ü–∏—è {distance_to_next}, –¥–µ–π—Å—Ç–≤–∏–µ: {action}, —Å–∫–æ—Ä–æ—Å—Ç—å: {old_speed} -> {car.speed} ({speed_change:+d})")
    
    for car in sorted_cars:
        old_x, old_y = car.get_coordinates()
        old_laps = car.laps
        old_position = car.position
        car.move()
        new_x, new_y = car.get_coordinates()
        lap_completed = car.laps > old_laps
        position_change = f"({old_x},{old_y}) -> ({new_x},{new_y})"
        if lap_completed:
            position_change += f" [–ö–†–£–ì {car.laps}]"
        print(f"{car.name}: {position_change}")
    
    check_collisions(cars, field_size)

def check_collisions(cars, field_size):
    positions = {}
    for car in cars:
        if car.position in positions:
            other_car = positions[car.position]
            x, y = car.get_coordinates()
            print(f"–°–¢–û–õ–ö–ù–û–í–ï–ù–ò–ï! {car.name} –∏ {other_car.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({x},{y})")
            
            if car.position < other_car.position:
                rear_car, front_car = car, other_car
            else:
                rear_car, front_car = other_car, car
            
            rear_car.position = max(front_car.position - 1, 0)
            rear_car.speed = max(rear_car.speed - rear_car.acceleration, 0)
            print(f"{rear_car.name} –∑–∞–º–µ–¥–ª–∏–ª—Å—è –¥–æ {rear_car.speed} –ø–æ—Å–ª–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è")
        else:
            positions[car.position] = car

def display_field(cars, field_size):
    print("\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è:")
    field = [['.' for _ in range(field_size)] for _ in range(field_size)]
    
    for car in cars:
        x, y = car.get_coordinates()
        if 0 <= x < field_size and 0 <= y < field_size:
            field[y][x] = car.name[0].upper()
    
    print("   " + "".join(f"{i%10}" for i in range(field_size)))
    print("   " + "-" * field_size)
    
    for y in range(field_size):
        row_display = f"{y:2}|" + "".join(field[y]) + "|"
        print(row_display)
    
    print("   " + "-" * field_size)
    print("\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–∞—Ö:")
    for car in sorted(cars, key=lambda c: (-c.laps, -c.total_distance)):
        x, y = car.get_coordinates()
        print(f"{car.name}: –∫—Ä—É–≥ {car.laps}, –ø–æ–∑ ({x},{y}), —Å–∫–æ—Ä {car.speed}")

def display_leaderboard(cars):
    print("\nüèÅ –¢–ê–ë–õ–ò–¶–ê –õ–ò–î–ï–†–û–í üèÅ")
    sorted_cars = sorted(cars, key=lambda c: (-c.laps, -c.total_distance))
    for i, car in enumerate(sorted_cars, 1):
        print(f"{i}. {car.name}: {car.laps} –∫—Ä—É–≥–æ–≤, {car.total_distance} –µ–¥–∏–Ω–∏—Ü")

def display_car_stats(cars):
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ê–®–ò–ù:")
    print("–ù–∞–∑–≤–∞–Ω–∏–µ      | –ú–∞–∫—Å–°–∫ | –£—Å–∫ | –¢–æ—Ä–º% | –ö—Ä—É–≥–∏ | –î–∏—Å—Ç–∞–Ω—Ü–∏—è")
    print("-" * 55)
    for car in sorted(cars, key=lambda c: (-c.laps, -c.total_distance)):
        print(f"{car.name:12} | {car.max_speed:6} | {car.acceleration:3} | {car.brake_probability:6.2f} | {car.laps:5} | {car.total_distance:8}")

def main():
    field_size = 30
    total_cells = field_size * field_size
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä –∫—Ä—É–≥–æ–≤—ã—Ö –≥–æ–Ω–æ–∫!")
    print(f"–†–∞–∑–º–µ—Ä –ø–æ–ª—è: {field_size}x{field_size} –∫–ª–µ—Ç–æ–∫ ({total_cells} –≤—Å–µ–≥–æ –∫–ª–µ—Ç–æ–∫)")
    print("–ú–∞—à–∏–Ω—ã –¥–≤–∏–∂—É—Ç—Å—è –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏ –∏–∑ 900 –∫–ª–µ—Ç–æ–∫")
    print("–í–∏–∑—É–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ç–∫—É 30x30 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞")
    print("–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ü–∞ –º–∞—à–∏–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫ –Ω–∞—á–∞–ª—É")
    print("–¢–æ—Ä–º–æ–∂–µ–Ω–∏–µ —É–º–µ–Ω—å—à–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è")
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
    print("1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (—Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)")
    print("2 - –†—É—á–Ω–æ–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)")
    
    while True:
        choice = input("–í–≤–µ–¥–∏—Ç–µ –≤—ã–±–æ—Ä (1 –∏–ª–∏ 2): ")
        if choice == '1':
            cars = initialize_cars_automatically(field_size)
            break
        elif choice == '2':
            cars = initialize_cars_manually(field_size)
            break
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
    
    step_count = 0
    while True:
        print(f"\n=== –®–∞–≥ {step_count} ===")
        display_field(cars, field_size)
        display_leaderboard(cars)
        display_car_stats(cars)
        
        command = input("\n–í–≤–µ–¥–∏—Ç–µ 'n' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞, 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 'r' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤: ")
        if command.lower() == 'q':
            break
        elif command.lower() == 'n':
            simulate_step(cars, field_size)
            step_count += 1
        elif command.lower() == 'r':
            try:
                steps = int(input("–°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å? "))
                for _ in range(steps):
                    simulate_step(cars, field_size)
                    step_count += 1
                    display_field(cars, field_size)
                    display_leaderboard(cars)
                    display_car_stats(cars)
            except ValueError:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        else:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

if __name__ == "__main__":
    main()